{"version":3,"sources":["src/resources/index.js","src/repository/todo-repository.js","src/main.js","src/environment.js","src/domain/todo.js","assets/style/app/_layout.scss","src/app.js"],"names":["configure","config","globalResources","TodoRepository","client","useStandardConfiguration","withBaseUrl","findAll","fetch","then","response","json","result","data","forEach","todo","push","Object","assign","catch","done","save","method","id","body","JSON","stringify","aurelia","use","standardConfiguration","feature","debug","developmentLogging","testing","plugin","start","setRoot","Todo","title","toggle","App","repository","todoField","todos","unCompleted","activate","fetchTodos","addTodo","checkIncompleted","filter","length"],"mappings":"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","file":"app-bundle.js","sourcesContent":["export function configure(config) {\n  config.globalResources([\n    'bootstrap/css/bootstrap.css',\n    'assets/style/main.css'\n  ]);\n}\n","import {inject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-fetch-client';\nimport {Todo} from '../domain/todo';\n\n@inject(HttpClient)\nexport class TodoRepository {\n  constructor(client) {\n    this.client = client;\n    this.client.configure(config => {\n      config\n        .useStandardConfiguration()\n        .withBaseUrl('//localhost:8080');\n    });\n  }\n\n  findAll() {\n    return this.client.fetch('/todos')\n      .then(response => response.json())\n      .then(response => {\n        let result = [];\n        response.data.forEach((todo) => {\n          result.push(Object.assign(new Todo(), todo));\n        });\n        return result;\n      })\n      .catch(() => {\n        return [{todo: 'Write a poem', done: false}, {\n          todo: 'Fix your broken iPad',\n          done: false\n        }, {todo: 'Read the latest news', done: true}];\n      });\n  }\n\n  save(todo) {\n    return this.client.fetch('/todos', {\n      method: todo.id ? 'PUT' : 'POST',\n      body: JSON.stringify(todo)\n    });\n  }\n}\n\n","import environment from './environment';\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","export class Todo {\n  constructor(title) {\n    this.id = null;\n    this.todo = title;\n    this.done = false;\n  }\n\n  toggle() {\n    this.done = !this.done;\n  }\n}\n","body {\n  background-color: gray;\n}\n\n.nopadding {\n  padding: 0 !important;\n  margin: 0 !important;\n}\n\n.todo-footer {\n  background-color: #F4FCE8;\n  padding: 10px 20px;\n}\n\ninput {\n width: 25em !important;\n}\n\nli.checked span:first-child + span:hover {\n  text-decoration: line-through;\n}\n\nli.checked span:first-child {\n  text-decoration: line-through;\n}\n","import {inject} from 'aurelia-framework';\nimport {TodoRepository} from './repository/todo-repository';\nimport {Todo} from './domain/todo';\n\n@inject(TodoRepository)\nexport class App {\n  constructor(repository) {\n    this.repository = repository;\n\n    this.todoField = '';\n    this.todos = [];\n    this.unCompleted = 0;\n  }\n\n  activate() {\n    this.fetchTodos();\n  }\n\n  addTodo() {\n    this.repository.save(new Todo(this.todoField)).then(() => {\n      this.todoField = '';\n      this.fetchTodos();\n    });\n  }\n\n  toggle(todo) {\n    todo.toggle();\n    this.checkIncompleted();\n    this.repository.save(todo);\n  }\n\n  fetchTodos() {\n    this.repository.findAll().then(todos => {\n      this.todos = todos;\n      this.checkIncompleted();\n    });\n  }\n\n  checkIncompleted() {\n    this.unCompleted = this.todos.filter(todo => !todo.done).length;\n  }\n}\n"],"sourceRoot":".."}